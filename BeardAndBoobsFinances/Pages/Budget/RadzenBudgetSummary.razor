@*RAZDEN DATAGRID SUMMARY WITH DRILL THROUGH EXAMPLE*@

@page "/Budget/Summary"

@inject IBudgetDataSummary _db
@inject IBudgetSummaryColumns _db2
@inject IColumnXREF _db3
@inject ContextMenuService ContextMenuService

<h3>RadzenBudget</h3>

@if (budget is null || columns is null)
{
    <p><em>Loadin' mah BLAZOR w/RADZEN flava britches dynamically! in a moment ...</em></p>
}
else
{
    <RadzenDataGrid 
        Data="@budget" 
        TItem="BudgetSummaryModel" 
        AllowSorting="true" 
        AllowFiltering="true" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        FilterMode="FilterMode.Advanced"
        SelectionMode="DataGridSelectionMode.Multiple" 
        RowDoubleClick="@DoubleClick" 
        ContextMenu=@(args => ShowContextMenuWithItems(args)) ButtonStyle="ButtonStyle.Secondary"
        @bind-Value=@selectedBudgetItem
        >
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
        </EmptyTemplate>
        <Columns>
            @foreach(var columnData in columns)
               {
                  <RadzenDataGridColumn 
                    TItem="BudgetSummaryModel" 
                    Property=@columnData.Name 
                    Title=@columnData.DisplayName 
                    Visible=@columnData.Visible 
                    Filterable=@columnData.Filterable 
                    FormatString=@columnData.Formatting 
                    />
               }
        </Columns>
    </RadzenDataGrid>
}

@code {

    private IEnumerable<BudgetSummaryModel> budget;
    private IList<BudgetColumnsModel> columns;
    private IEnumerable<ColumnXREF_Import> formatting;
    private IList<BudgetSummaryModel> selectedBudgetItem;

    protected override async Task OnInitializedAsync()
    {
        budget = await _db.GetBudgetSummary();
        formatting = await _db3.GetColumnXREF();
        columns = _db2.GetColumnsAdvanced(formatting);
    }

    void DoubleClick(DataGridRowMouseEventArgs<BudgetSummaryModel> args)
    {
        Log.Information($"Date={args.Data.Date.ToShortDateString()} clicked");
    }

    void ShowContextMenuWithItems(MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Export to PDF", Value = 1 },
                new ContextMenuItem(){ Text = "Export to Excel", Value = 2 },
         }, OnMenuItemClick);
    }

    void ShowContextMenuWithContent(MouseEventArgs args) => ContextMenuService.Open(args, ds =>
        @<RadzenMenu Click="OnMenuItemClick"/>);

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Log.Information($"Menu item with Value={args.Value} clicked");
    }
}