@*RAZDEN DATAGRID SUMMARY WITH DRILL THROUGH EXAMPLE*@

@page "/Budget/Summary"
@using System.Text
@using ClosedXML.Excel

@inject IBudgetDataSummary _db
@inject IBudgetSummaryColumns _db2
@inject IColumnXREF _db3
@inject ContextMenuService ContextMenuService
@inject IJSRuntime JS

<h3>RadzenBudget</h3>

@if (budget is null || columns is null)
{
    <p><em>Loadin' ...</em></p>
}
else
{
    <RadzenDataGrid 
        Data="@budget" 
        TItem="BudgetSummaryModel" 
        AllowSorting="true"
        AllowFiltering="true" 
        Style="height:1000px"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        FilterMode="FilterMode.Advanced"
        SelectionMode="DataGridSelectionMode.Multiple" 
        RowDoubleClick="@DoubleClick" 
        ContextMenu=@(args => ShowContextMenuWithItems(args)) ButtonStyle="ButtonStyle.Secondary"
        @bind-Value=@selectedBudgetItem
        >
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
        </EmptyTemplate>
        <Columns>
            @foreach(var columnData in columns)
               {
                  <RadzenDataGridColumn 
                    TItem="BudgetSummaryModel" 
                    Property=@columnData.Name 
                    Title=@columnData.DisplayName 
                    Visible=@columnData.Visible 
                    Filterable=@columnData.Filterable 
                    FormatString=@columnData.Formatting 
                    />
               }
        </Columns>
    </RadzenDataGrid>
}

@code {

    private IEnumerable<BudgetSummaryModel> budget;
    private IList<BudgetColumnsModel> columns;
    private IEnumerable<ColumnXREF_Import> formatting;
    private IList<BudgetSummaryModel> selectedBudgetItem;

    protected override async Task OnInitializedAsync()
    {
        budget = await _db.GetBudgetSummary();
        formatting = await _db3.GetColumnXREF();
        columns = _db2.GetColumnsAdvanced(formatting);
    }

    void DoubleClick(DataGridRowMouseEventArgs<BudgetSummaryModel> args)
    {
        Log.Information($"Date={args.Data.Date.ToShortDateString()} clicked");
    }

    void ShowContextMenuWithItems(MouseEventArgs args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Export to Excel", Value = 1 },
         }, OnMenuItemClick);
    }

    void ShowContextMenuWithContent(MouseEventArgs args) => ContextMenuService.Open(args, ds =>
    @<RadzenMenu Click="OnMenuItemClick"/>
    );

    void OnMenuItemClick(MenuItemEventArgs args)
    {
        switch (args.Value.ToString())
        {
            case "1":
                Log.Information($"Menu item with Value={args.Value} clicked");
                DownloadFileFromStream();
                ContextMenuService.Close();
                break;
            default:
                ContextMenuService.Close();
                break;
        }
    }

    private byte[] GetFileStream()
    {
        var wb = new XLWorkbook();
        var ws = wb.Worksheets.Add("Data");

        for (var i = 1; i <= budget.Count(); i++)
        {
            ws.Cell(i, 1).Value = budget.ElementAt(i - 1).Date.ToShortDateString();
            ws.Cell(i, 2).Value = budget.ElementAt(i - 1).Inflow.ToString();
            ws.Cell(i, 3).Value = budget.ElementAt(i - 1).Outflow.ToString();
            ws.Cell(i, 4).Value = budget.ElementAt(i - 1).Total.ToString();
        }

        var stream = new MemoryStream();
        wb.SaveAs(stream);
        return stream.ToArray();
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = "test.xslx";

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, Convert.ToBase64String(fileStream));
    }
}